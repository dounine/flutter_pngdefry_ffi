// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/flutter_pngdefry_ffi.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class FlutterPngdefryFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterPngdefryFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterPngdefryFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> restore_png(
    ffi.Pointer<ffi.Char> filePath,
    ffi.Pointer<ffi.Char> outputPath,
  ) {
    return _restore_png(
      filePath,
      outputPath,
    );
  }

  late final _restore_pngPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('restore_png');
  late final _restore_png = _restore_pngPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int is_iphone_png(
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _is_iphone_png(
      filePath,
    );
  }

  late final _is_iphone_pngPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'is_iphone_png');
  late final _is_iphone_png =
      _is_iphone_pngPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();
}
